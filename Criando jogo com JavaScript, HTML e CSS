<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">

  <link rel="stylesheet" href="./css/reset.css">
  <link rel="stylesheet" href="./css/login.css">

  <script defer src="./js/login.js"></script>

  <title>Memory Game | Login</title>
<style>
@import url('https://fonts.googleapis.com/css2?family=Press+Start+2P&display=swap');

* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
  list-style: none;
  border: none;
  font-family: 'Press Start 2P', cursive;
}
main {
  display: flex;
  flex-direction: column;
  width: 100%;
  background-image: url('../images/bg.jpg');
  background-size: cover;
  min-height: 100vh;
  align-items: center;
  justify-content: center;
  padding: 20px 20px 50px;
}

header {
  display: flex;
  align-items: center;
  justify-content: space-between;
  background-color: rgba(255, 255, 255, 0.8);
  font-size: 1.2em;
  width: 100%;
  max-width: 800px;
  padding: 30px;
  margin: 0 0 30px;
  border-radius: 5px;
}

.grid {
  display: grid;
  grid-template-columns: repeat(5, 1fr);
  gap: 15px;
  width: 100%;
  max-width: 800px;
  margin: 0 auto;
}

.card {
  aspect-ratio: 3/4;
  width: 100%;
  border-radius: 5px;
  position: relative;
  transition: all 400ms ease;
  transform-style: preserve-3d;
  background-color: #ccc;
}

.face {
  width: 100%;
  height: 100%;
  position: absolute;
  background-size: cover;
  background-position: center;
  border: 2px solid #39813a;
  border-radius: 5px;
  transition: all 400ms ease;
}

.front {
  transform: rotateY(180deg);
}

.back {
  background-image: url('../images/back.png');
  backface-visibility: hidden;
}

.reveal-card {
  transform: rotateY(180deg);
}

.disabled-card {
  filter: saturate(0);
  opacity: 0.5;
}
.login-form {
  align-items: center;
  display: flex;
  flex-direction: column;
  height: 100vh;
  justify-content: center;
}

.login__header {
  align-items: center;
  display: flex;
  flex-direction: column;
  justify-content: center;
  margin-bottom: 50px;
}

.login__header img {
  width: 100px;
}

.login__header h1 {
  color: #333;
  font-size: 1.5em;
}

.login__input {
  border: 2px solid #333;
  border-radius: 8px;
  color: #333;
  font-size: 1em;
  margin-bottom: 15px;
  max-width: 300px;
  outline: none;
  padding: 15px;
  width: 100%;
}

.login__button {
  background-color: #ee665c;
  border-radius: 8px;
  color: #fff;
  cursor: pointer;
  font-size: 1em;
  max-width: 300px;
  padding: 15px;
  width: 100%;
}

.login__button:disabled {
  background-color: #eee;
  color: #aaa;
  cursor: auto;
}

</style>
</head>
<body>
  
  <form class="login-form">

    <div class="login__header">
      <img src="./images/brain.png" alt="brain icon">
      <h1>Memory Game</h1>
    </div>

    <input type="text" placeholder="Name" class="login__input">
    <button type="submit" class="login__button" disabled>Play</button>

  </form>
<script>
const grid = document.querySelector('.grid');
const spanPlayer = document.querySelector('.player');
const timer = document.querySelector('.timer');

const characters = [
  'beth',
  'jerry',
  'jessica',
  'morty',
  'pessoa-passaro',
  'pickle-rick',
  'rick',
  'summer',
  'meeseeks',
  'scroopy',
];

const createElement = (tag, className) => {
  const element = document.createElement(tag);
  element.className = className;
  return element;
}

let firstCard = '';
let secondCard = '';

const checkEndGame = () => {
  const disabledCards = document.querySelectorAll('.disabled-card');

  if (disabledCards.length === 20) {
    clearInterval(this.loop);
    alert(`ParabÃ©ns, ${spanPlayer.innerHTML}! Seu tempo foi: ${timer.innerHTML}`);
  }
}

const checkCards = () => {
  const firstCharacter = firstCard.getAttribute('data-character');
  const secondCharacter = secondCard.getAttribute('data-character');

  if (firstCharacter === secondCharacter) {

    firstCard.firstChild.classList.add('disabled-card');
    secondCard.firstChild.classList.add('disabled-card');

    firstCard = '';
    secondCard = '';

    checkEndGame();

  } else {
    setTimeout(() => {

      firstCard.classList.remove('reveal-card');
      secondCard.classList.remove('reveal-card');

      firstCard = '';
      secondCard = '';

    }, 500);
  }

}

const revealCard = ({ target }) => {

  if (target.parentNode.className.includes('reveal-card')) {
    return;
  }

  if (firstCard === '') {

    target.parentNode.classList.add('reveal-card');
    firstCard = target.parentNode;

  } else if (secondCard === '') {

    target.parentNode.classList.add('reveal-card');
    secondCard = target.parentNode;

    checkCards();

  }  
}

const createCard = (character) => {

  const card = createElement('div', 'card');
  const front = createElement('div', 'face front');
  const back = createElement('div', 'face back');

  front.style.backgroundImage = `url('../images/${character}.png')`;

  card.appendChild(front);
  card.appendChild(back);

  card.addEventListener('click', revealCard);
  card.setAttribute('data-character', character)

  return card;
}

const loadGame = () => {
  const duplicateCharacters = [ ...characters, ...characters ];

  const shuffledArray = duplicateCharacters.sort(() => Math.random() - 0.5);

  shuffledArray.forEach((character) => {
    const card = createCard(character);
    grid.appendChild(card);
  });
}

const startTimer = () => {

  this.loop = setInterval(() => {
    const currentTime = +timer.innerHTML;
    timer.innerHTML = currentTime + 1;
  }, 1000);

}

window.onload = () => {
  spanPlayer.innerHTML = localStorage.getItem('player');
  startTimer();
  loadGame();
}
const input = document.querySelector('.login__input');
const button = document.querySelector('.login__button');
const form = document.querySelector('.login-form');

const validateInput = ({ target }) => {
  if (target.value.length > 2) {
    button.removeAttribute('disabled');
    return;
  }

  button.setAttribute('disabled', '');
}

const handleSubmit = (event) => {
  event.preventDefault();
  
  localStorage.setItem('player', input.value);
  window.location = 'pages/game.html';
}

input.addEventListener('input', validateInput);
form.addEventListener('submit', handleSubmit);
</script>
</body>
</html>
